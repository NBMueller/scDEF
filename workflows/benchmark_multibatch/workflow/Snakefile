import os

configfile: "config/config.yaml"

N_REPS = config["n_reps"]
N_BATCHES = config["n_batches"]
FRACS_SHARED = config["frac_shared"]
CHC_REPS = config["chc_reps"]
TEST_FRAC = config["test_frac"]

rule all:
    input:
        fname = f'results/scores.csv'

rule generate_data:
    resources:
        mem_mb = 40000,
    params:
        de_prob = config["de_prob"],
        batch_facscale = config["batch_facscale"],
        n_cells = config["n_cells"],
        n_genes = config["n_genes"],
        n_groups = config["n_groups"],
        n_batches = "{n_batches}",
        frac_shared = "{frac_shared}",
        seed = "{rep_id}",
    output:
        counts_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_counts.csv',
        meta_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_meta.csv',
        markers_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_markers.csv',
        plot_groups_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_plot_groups.png',
        plot_batches_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_plot_batches.png',
    script:
        "scripts/generate_data.R"

rule run_scdef:
    resources:
        mem_mb = 40000,
        slurm_extra="--gpus=1",
        nodes = 48
    params:
        seed = "{rep_id}",
        n_top_genes = config["n_top_genes"],
        chc_reps = CHC_REPS,
        test_frac = TEST_FRAC,
        ard = config["scdef"]["ard"],
        n_factors = config["scdef"]["n_factors"],
        n_hfactors = config["scdef"]["n_hfactors"],
        shape = config["scdef"]["shape"],
        n_iters = config["scdef"]["n_iters"],
    input:
        counts_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_counts.csv',
        meta_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_meta.csv',
        markers_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_markers.csv',
    output:
        auc_fname = 'results/scDEF/{n_batches}/{frac_shared}/{rep_id}_auc_score.txt',
        chc_fname = 'results/scDEF/{n_batches}/{frac_shared}/{rep_id}_chc_score.txt',
        asw_fname = 'results/scDEF/{n_batches}/{frac_shared}/{rep_id}_asw_score.txt',
        ari_fname = 'results/scDEF/{n_batches}/{frac_shared}/{rep_id}_ari_score.txt',
        mod_fname = 'results/scDEF/{n_batches}/{frac_shared}/{rep_id}_mod_score.txt',
        ent_fname = 'results/scDEF/{n_batches}/{frac_shared}/{rep_id}_ent_score.txt',
    script:
        "scripts/run_scdef.py"


rule run_unintegrated:
    resources:
        mem_mb = 40000,
        nodes = 48
    params:
        seed = "{rep_id}",
        n_top_genes = config["n_top_genes"],
        chc_reps = CHC_REPS,
        test_frac = TEST_FRAC,
    input:
        counts_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_counts.csv',
        meta_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_meta.csv',
        markers_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_markers.csv',
    output:
        auc_fname = 'results/Unintegrated/{n_batches}/{frac_shared}/{rep_id}_auc_score.txt',
        chc_fname = 'results/Unintegrated/{n_batches}/{frac_shared}/{rep_id}_chc_score.txt',
        asw_fname = 'results/Unintegrated/{n_batches}/{frac_shared}/{rep_id}_asw_score.txt',
        ari_fname = 'results/Unintegrated/{n_batches}/{frac_shared}/{rep_id}_ari_score.txt',
        mod_fname = 'results/Unintegrated/{n_batches}/{frac_shared}/{rep_id}_mod_score.txt',
        ent_fname = 'results/Unintegrated/{n_batches}/{frac_shared}/{rep_id}_ent_score.txt',
    script:
        "scripts/run_unintegrated.py"

rule run_nmf:
    resources:
        mem_mb = 40000,
        nodes = 48
    params:
        seed = "{rep_id}",
        k_min = config["k_min"],
        k_max = config["k_max"],
        n_top_genes = config["n_top_genes"],
        chc_reps = CHC_REPS,
        test_frac = TEST_FRAC,
    input:
        counts_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_counts.csv',
        meta_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_meta.csv',
        markers_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_markers.csv',
    output:
        auc_fname = 'results/NMF/{n_batches}/{frac_shared}/{rep_id}_auc_score.txt',
        chc_fname = 'results/NMF/{n_batches}/{frac_shared}/{rep_id}_chc_score.txt',
        asw_fname = 'results/NMF/{n_batches}/{frac_shared}/{rep_id}_asw_score.txt',
        ari_fname = 'results/NMF/{n_batches}/{frac_shared}/{rep_id}_ari_score.txt',
        mod_fname = 'results/NMF/{n_batches}/{frac_shared}/{rep_id}_mod_score.txt',
        ent_fname = 'results/NMF/{n_batches}/{frac_shared}/{rep_id}_ent_score.txt',
    script:
        "scripts/run_nmf.py"

rule run_schpf:
    resources:
        mem_mb = 40000,
        nodes = 48
    params:
        seed = "{rep_id}",
        k_min = config["k_min"],
        k_max = config["k_max"],
        n_top_genes = config["n_top_genes"],
        chc_reps = CHC_REPS,
        test_frac = TEST_FRAC,
    input:
        counts_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_counts.csv',
        meta_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_meta.csv',
        markers_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_markers.csv',
    output:
        auc_fname = 'results/scHPF/{n_batches}/{frac_shared}/{rep_id}_auc_score.txt',
        chc_fname = 'results/scHPF/{n_batches}/{frac_shared}/{rep_id}_chc_score.txt',
        asw_fname = 'results/scHPF/{n_batches}/{frac_shared}/{rep_id}_asw_score.txt',
        ari_fname = 'results/scHPF/{n_batches}/{frac_shared}/{rep_id}_ari_score.txt',
        mod_fname = 'results/scHPF/{n_batches}/{frac_shared}/{rep_id}_mod_score.txt',
        ent_fname = 'results/scHPF/{n_batches}/{frac_shared}/{rep_id}_ent_score.txt',
    script:
        "scripts/run_schpf.py"

rule run_ldvae:
    resources:
        mem_mb = 40000,
        slurm_extra="--gpus=1",
        nodes = 48
    params:
        seed = "{rep_id}",
        k_min = config["k_min"],
        k_max = config["k_max"],
        n_top_genes = config["n_top_genes"],
        chc_reps = CHC_REPS,
        test_frac = TEST_FRAC,
    input:
        counts_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_counts.csv',
        meta_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_meta.csv',
        markers_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_markers.csv',
    output:
        auc_fname = 'results/LDVAE/{n_batches}/{frac_shared}/{rep_id}_auc_score.txt',
        chc_fname = 'results/LDVAE/{n_batches}/{frac_shared}/{rep_id}_chc_score.txt',
        asw_fname = 'results/LDVAE/{n_batches}/{frac_shared}/{rep_id}_asw_score.txt',
        ari_fname = 'results/LDVAE/{n_batches}/{frac_shared}/{rep_id}_ari_score.txt',
        mod_fname = 'results/LDVAE/{n_batches}/{frac_shared}/{rep_id}_mod_score.txt',
        ent_fname = 'results/LDVAE/{n_batches}/{frac_shared}/{rep_id}_ent_score.txt',
    script:
        "scripts/run_ldvae.py"

rule run_scvi:
    resources:
        mem_mb = 40000,
        slurm_extra="--gpus=1",
        nodes = 48
    params:
        seed = "{rep_id}",
        n_top_genes = config["n_top_genes"],
        chc_reps = CHC_REPS,
        test_frac = TEST_FRAC,
    input:
        counts_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_counts.csv',
        meta_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_meta.csv',
        markers_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_markers.csv',
    output:
        auc_fname = 'results/scVI/{n_batches}/{frac_shared}/{rep_id}_auc_score.txt',
        chc_fname = 'results/scVI/{n_batches}/{frac_shared}/{rep_id}_chc_score.txt',
        asw_fname = 'results/scVI/{n_batches}/{frac_shared}/{rep_id}_asw_score.txt',
        ari_fname = 'results/scVI/{n_batches}/{frac_shared}/{rep_id}_ari_score.txt',
        mod_fname = 'results/scVI/{n_batches}/{frac_shared}/{rep_id}_mod_score.txt',
        ent_fname = 'results/scVI/{n_batches}/{frac_shared}/{rep_id}_ent_score.txt',
    script:
        "scripts/run_scvi.py"

rule run_harmony:
    resources:
        mem_mb = 40000,
        nodes = 48
    params:
        seed = "{rep_id}",
        n_top_genes = config["n_top_genes"],
        chc_reps = CHC_REPS,
        test_frac = TEST_FRAC,
    input:
        counts_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_counts.csv',
        meta_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_meta.csv',
        markers_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_markers.csv',
    output:
        auc_fname = 'results/Harmony/{n_batches}/{frac_shared}/{rep_id}_auc_score.txt',
        chc_fname = 'results/Harmony/{n_batches}/{frac_shared}/{rep_id}_chc_score.txt',
        asw_fname = 'results/Harmony/{n_batches}/{frac_shared}/{rep_id}_asw_score.txt',
        ari_fname = 'results/Harmony/{n_batches}/{frac_shared}/{rep_id}_ari_score.txt',
        mod_fname = 'results/Harmony/{n_batches}/{frac_shared}/{rep_id}_mod_score.txt',
        ent_fname = 'results/Harmony/{n_batches}/{frac_shared}/{rep_id}_ent_score.txt',
    script:
        "scripts/run_harmony.py"

rule run_scanorama:
    resources:
        mem_mb = 40000,
        nodes = 48
    params:
        seed = "{rep_id}",
        n_top_genes = config["n_top_genes"],
        chc_reps = CHC_REPS,
        test_frac = TEST_FRAC,
    input:
        counts_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_counts.csv',
        meta_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_meta.csv',
        markers_fname = 'results/data/{n_batches}/{frac_shared}/{rep_id}_markers.csv',
    output:
        auc_fname = 'results/Scanorama/{n_batches}/{frac_shared}/{rep_id}_auc_score.txt',
        chc_fname = 'results/Scanorama/{n_batches}/{frac_shared}/{rep_id}_chc_score.txt',
        asw_fname = 'results/Scanorama/{n_batches}/{frac_shared}/{rep_id}_asw_score.txt',
        ari_fname = 'results/Scanorama/{n_batches}/{frac_shared}/{rep_id}_ari_score.txt',
        mod_fname = 'results/Scanorama/{n_batches}/{frac_shared}/{rep_id}_mod_score.txt',
        ent_fname = 'results/Scanorama/{n_batches}/{frac_shared}/{rep_id}_ent_score.txt',
    script:
        "scripts/run_scanorama.py"

rule gather_scores:
    input:
        fname_list = expand(
            'results/{method}/{n_batches}/{frac_shared}/{rep_id}_{score}_score.txt',
            method=["scDEF", "NMF", "scHPF", "LDVAE", "scVI", "Harmony", "Scanorama", "Unintegrated"],
            frac_shared=FRACS_SHARED, n_batches=N_BATCHES,
            rep_id=[r for r in range(N_REPS)],
            score=['asw', 'ari', 'ent', 'chc', 'auc'])
    output:
        'results/scores.csv'
    script:
        'scripts/gather_scores.py'

rule plot_benchmark:
    input:
        'results/scores.csv'
    output:
        'results/multibatch_benchmark_figure.png',
    script:
        "scripts/plot_benchmark.py"
