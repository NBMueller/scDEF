import os

configfile: "config/config.yaml"

N_REPS = config["n_reps"]
SEPARABILITY = config["de_prob"]
FRACS_SHARED = config["frac_shared"]
METHODS = config["methods"]

TRUE_HRC = {'Group1': ['Group1Group1', 'Group1Group2'],
            'Group1Group1': ['Group1Group1Group1', 'Group1Group1Group2'],
            'Group1Group2': ['Group1Group2Group3', 'Group1Group2Group4'],
            'Group2': ['Group2Group3', 'Group2Group4'],
            'Group2Group3': ['Group2Group3Group5', 'Group2Group3Group6'],
            'Group2Group4': ['Group2Group4Group7', 'Group2Group4Group8']
            }
rule all:
    input:
        fname = f'results/scores.csv'

rule generate_data:
    resources:
        time = "00:20:00",
    params:
        de_prob = "{separability}",
        batch_facscale = config["batch_facscale"],
        n_cells = config["n_cells"],
        n_batches = config["n_batches"],
        frac_shared = "{frac_shared}",
        seed = "{rep_id}",
    output:
        counts_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_counts.csv',
        meta_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_meta.csv',
        markers_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_markers.csv',
        umap_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_umap.png',
        umap_nobatch_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_umap_nobatch.png',
    script:
        "scripts/splatter_hierarchical.R"

rule run_scdef:
    resources:
        slurm_extra="--gpus=1 --ntasks-per-node=10",
    params:
        seed = "{rep_id}",
        true_hrc = TRUE_HRC,
    input:
        counts_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_counts.csv',
        meta_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_meta.csv',
        markers_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_markers.csv',
    output:
        scores_fname = 'results/scDEF/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_scores.csv',
    script:
        "scripts/run_scdef.py"


rule run_scdef_un:
    resources:
        slurm_extra="--gpus=1 --ntasks-per-node=10",
    params:
        seed = "{rep_id}",
        true_hrc = TRUE_HRC,
    input:
        counts_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_counts.csv',
        meta_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_meta.csv',
        markers_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_markers.csv',
    output:
        scores_fname = 'results/scDEF_un/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_scores.csv',
    script:
        "scripts/run_scdef_un.py"

rule run_unintegrated:
    resources:
        time = "00:40:00",
        mem = 12000,
    params:
        seed = "{rep_id}",
        true_hrc = TRUE_HRC,
    input:
        counts_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_counts.csv',
        meta_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_meta.csv',
        markers_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_markers.csv',
    output:
        scores_fname = 'results/Unintegrated/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_scores.csv',
    script:
        "scripts/run_unintegrated.py"

rule run_nmf:
    resources:
        time = "00:40:00",
        mem = 12000,
    params:
        seed = "{rep_id}",
        true_hrc = TRUE_HRC,
    input:
        counts_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_counts.csv',
        meta_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_meta.csv',
        markers_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_markers.csv',
    output:
        scores_fname = 'results/NMF/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_scores.csv',
    script:
        "scripts/run_nmf.py"

rule run_schpf:
    resources:
        time = "00:40:00",
        mem = 12000,
    params:
        seed = "{rep_id}",
        true_hrc = TRUE_HRC,
    input:
        counts_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_counts.csv',
        meta_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_meta.csv',
        markers_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_markers.csv',
    output:
        scores_fname = 'results/scHPF/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_scores.csv',
    script:
        "scripts/run_schpf.py"

rule run_scvi:
    resources:
        slurm_extra="--gpus=1 --ntasks-per-node=10",
    params:
        seed = "{rep_id}",
        true_hrc = TRUE_HRC,
    input:
        counts_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_counts.csv',
        meta_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_meta.csv',
        markers_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_markers.csv',
    output:
        scores_fname = 'results/scVI/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_scores.csv',
    script:
        "scripts/run_scvi.py"

rule run_harmony:
    resources:
        time = "00:40:00",
        mem = 12000,
    params:
        seed = "{rep_id}",
        true_hrc = TRUE_HRC,
    input:
        counts_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_counts.csv',
        meta_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_meta.csv',
        markers_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_markers.csv',
    output:
        scores_fname = 'results/Harmony/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_scores.csv',
    script:
        "scripts/run_harmony.py"

rule run_scanorama:
    resources:
        time = "00:40:00",
        mem = 12000,
    params:
        seed = "{rep_id}",
        true_hrc = TRUE_HRC,
    input:
        counts_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_counts.csv',
        meta_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_meta.csv',
        markers_fname = 'results/data/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_markers.csv',
    output:
        scores_fname = 'results/Scanorama/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_scores.csv',
    script:
        "scripts/run_scanorama.py"

rule gather_scores:
    resources:
        time = "00:40:00",
        mem = 12000,
    input:
        fname_list = expand(
            'results/{method}/sep_{separability}/shared_{frac_shared}/rep_{rep_id}_scores.csv',
            method=METHODS,
            frac_shared=FRACS_SHARED, separability=SEPARABILITY,
            rep_id=[r for r in range(N_REPS)],)
    output:
        'results/scores.csv'
    script:
        'scripts/gather_scores.py'

rule plot_benchmark:
    input:
        'results/scores.csv'
    output:
        'results/multibatch_benchmark_figure.png',
    script:
        "scripts/plot_benchmark.py"
